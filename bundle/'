import emmetparser
parser = emmetparser.Parser()
test_index = 0
def expect (string,loc,to_be):
    global test_index
    test_index += 1
    result = parser.parse(string,loc)
    messages = ''
    success = True
    if len(to_be) != len(result):
        success = False
        messages += 'EXPECTED TUPLES TO BE SAME SIZE FOR TEST#' + str(test_index) + '\n'
        messages += 'IN =' + str(string) + '\n'
        messages += 'OUT=' + str(result) + '\n'
    else:
        for i in range(0,len(to_be)):
            if to_be[i] != result[i]:
                success = False
                messages += 'EXPECTED INDEX ' + str(i) +' TO BE ' + str(to_be[i]) + ' BUT GOT ' + str(result[i]) + '\n'
    if success == True:
        if len(messages) > 0:
            messages = '\n' + messages + '\n'
        messages = 'SUCCESS TEST ' + str(test_index) + messages
        print messages
    else:
        if len(messages) > 0:
            messages = '\n' + messages + '\n'
        messages = 'FAILURE TEST ' + str(test_index) +   messages
        print messages
        print result

expect('test',3,(1,'tes'))
expect('test#test',4,(1,'test'))
expect('test#test',6,(4,'test','id','t'))
expect('test#test',5,(4,'test','id',''))
expect('test.test',4,(1,'test'))
expect('test.test',6,(4,'test','className','t'))
expect('test.test',5,(4,'test','className',''))
expect('test.class#id',15,(4,'test','id',''))
#expect('test',3,(4,'test'))
#expect('test<afk',7,(4,'afk'))
#expect('test^afk',7,(4,'afk'))
#expect('',0,(4,''))
#expect('<test',4,(4,'test'))
#expect('te[afk',5,(8,'te','afk'))
#expect('te{<a[fk',7,(8,'a','fk'))
#expect('wtf[ test',7,(8,'wtf','tes'))
#expect('wtf{test} wtf[test',11,(4,'wt'))
#expect('wtf{test} wtf[test',16,(8,'wtf','tes'))
#expect('test [te = "afk" temt="abc"',25,(1024,'test','temt','abc'))
#expect('test [ te = "afk" te',13,(1024,'test','te','a'))
#expect('<test bc="test" te = "afk" te',23,(1024,'test','te','af'))
#expect('<test[value="tes<t" abc',22,(8,'test','abc'))
#expect('<el1["test"',8,(4,'tes'))
#expect('<el1["test"',10,(8,'el1',''))
#expect('<el1: ',5,(8,'el1:',''))
#expect('<analytics:reportChart ',22,(8,'analytics:reportChart',''))
#expect('abc[abc1[abc2[abc3=1 acc4=2',26,(1024,'abc2','acc4','2'))
#expect('abc[abc1[abc2[abc3=1 acc4=2',24,(8,'abc2','acc4'))
#expect('test.class#id',10,(4,'test'))
#print parser.parse('abc[abc1[abc2[abc3=1 acc4=2',24)

