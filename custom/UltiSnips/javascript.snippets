#;
#snippet "(?=;?!return[\s\t]*.*)" "end line" r
#snippet "(^((?!return)[\s\S;])*$)" "end line" r
#${1}
#endsnippet
#}
#snippet "^[\s\t]*\}$" "end line" r
#}
#${1}
#endsnippet
#snippet "\)$" "end line" r
#)
#${1}
#endsnippet

#window
snippet "\b[,]{0,1}(win)\b" "window" r
window
endsnippet
#document
snippet "\b[,]{0,1}(doc)\b" "document" r
document
endsnippet

#removeEventListener
snippet "\.rel\b" "removeEventListener" r
.removeEventListener(${1})
endsnippet

#addEventListener
snippet "\.ael\b" "addEventListener" r
.addEventListener(${1})
endsnippet

#createElement
snippet "\bcel\b" "createElement" r
createElement('${1}')
endsnippet

#me
snippet "\bm\b|\bme\b" "me" r
me = this
endsnippet

#appendChild
snippet "\bac\b" "appendChild" r
appendChild(${1})
endsnippet

#document.createElement
snippet "\bdcel\b" "document.createElement" r
document.createElement('${1}')
endsnippet

#setAttribute
snippet "\bsa\b" "setAttribute" r
setAttribute('${2}','${3}')
endsnippet

#removeAttribute
snippet "\bra\b" "removeAttribute" r
removeAttribute('${2}')
endsnippet

#stProperty
snippet "\bsp\b" "setProperty" r
setProperty('${1}','${2}')
endsnippet

#removeProperty
snippet "\brp\b" "removeProperty" r
removeProperty('${1}')
endsnippet

#removeProperty
snippet "\bto|typeof\b" "typeof" r
typeof ${1} === '${2}'
endsnippet

#style.propertyValue
snippet "\bspv\b" "style set property value" r
style.${1} = ${2}
endsnippet

#style.setProperty
snippet "\bssp\b" "style.setProperty" r
style.setProperty('${1}','${2}')
endsnippet

#style.removeProperty
snippet "\bsrp\b" "style.removeProperty" r
style.removeProperty('${1}')
endsnippet




#and &&
snippet "\b[,]{0,1}aa\b" "and &&" refs
&& 
endsnippet
#or ||
snippet "\b[,]{0,1}oo\b" "or ||" refs
|| 
endsnippet
#p ()
snippet "\b[,]{0,1}pa\b" "parenthesis" r
(${1})
endsnippet

#pop ({})
snippet "\b[,]{0,1}pop\b" "parenthesis with object" r
({
	'${1}' : ${2}
}${3})
endsnippet

#par ([])
snippet "\b[,]{0,1}par\b" "parenthesis with array" r
([${1}])
endsnippet


#ar []
snippet "\b[,]{0,1}ar\b" "array" r
[${1}]
endsnippet
#arop
snippet "\barop\b" "array containing object" r
[{
	'${1}' : ${2}
}]${3}
endsnippet
#op {}
snippet "{}p|\bop\b" "object key" r
{
	'${1}' : ${2}
}${3}
endsnippet
snippet "([^\{o\}]{1})p\b" "property in object" r
`!p
res = match.group(1) if match.group(1) is not None else ''
`'${1}' : ${2}
endsnippet
snippet "(\{p)(})?" "object key" r
{
	'${1}' : ${2}
`!p
res = '\n}' if match.group(2) is not None else ''
`
endsnippet 
#,
snippet "," "object key" r
,
'${1}' : ${2}
endsnippet

#proto
snippet pr "prototype" w
${1}.prototype.${2} = ${3};${4}
endsnippet

#forEach
snippet "\.fe\b" "forEach..." r
.forEach(${1})${2}
endsnippet

#pop
snippet "\.po|\.p\b" "pop..." r
.pop()${1}
endsnippet

#shift
snippet "\.sh\b" "shift..." r
.shift()${1}
endsnippet

#unshift
snippet "\.us|\.ush\b" "unshift..." r
.unshift(${1})${2}
endsnippet

#push
snippet "\.pu\b" "push..." r
.push(${1})${2}
endsnippet

#map
snippet "\.ma\b" "map..." r
.map(${1})${2}
endsnippet

#slice
snippet "\.sl\b" "slice..." r
.slice(${1})${2}
endsnippet

#splice
snippet "\.sp\b" "splice..." r
.splice(${1})${2}
endsnippet

#v
snippet "([^\(]{1})v|^v\b" "var" r
`!p
res = match.group(0) if match.group(0) is not None else ''
res += "ar"
` ${1};${2}
endsnippet

#wh 
snippet wh "while" w
while (${1}) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'
`${3}
endsnippet

#try
snippet try "try...catch" w
try {
	${1}
} catch (${2:e}) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res=''
`${3}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'
`${4}
endsnippet

#do
snippet do "do while" w
do {`!p
if (t[1] and t[1].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res=""
`${1}`!p
if (t[1] and t[1].find('\n') != 0):
	snip += '}'
else:
	res="}"
` while (${2})${3}
endsnippet
#fp
snippet fp "for property" w
for (${1} in ${2}) {`!p
if (t[4] and t[4].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${4}`!p
if (t[4] and t[4].find('\n') != 0):
	snip += '}'
else:
	res = '}'`${5}
endsnippet
	
	#fl
snippet fl "for loop - no vars" w
for (${1};${2};${3}) {`!p
if (t[4] and t[4].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${4}`!p
if (t[4] and t[4].find('\n') != 0):
	snip += '}'
else:
	res = '}'`${5}
endsnippet
#flu
snippet flu "for loop - increment up and cached length (incrementer then length then ln)" w
for (${1};${1/(var[\s\t]*)|((=|,).*)//g}<${1/(.*,)|(=.*)|(var[\s\t]*.*)//g)/};${1/(var[\s\t]*)|((=|,).*)//g}++) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`${3}
endsnippet
#fld
snippet fld "for loop - increment down and cached length (decrementer, assume 0)" w
for (${1};${1/(var[\s\t]*)|((=|,).*)//g}>=0;${1/(var[\s\t]*)|((=|,).*)//g}--) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`${3}
endsnippet

#"alert
snippet al "alert" w
alert(${1});${2}
endsnippet

#"console.log"
snippet cl "console.log" w
console.log(${1});${2}
endsnippet

#"console.warn"
snippet cw "console.warn" w
console.warn(${1});${2}
endsnippet

#"console.error"
snippet ce "console.error" w
console.error(${1});${2}
endsnippet


#CLOSURE
snippet "\bclo|close|closure\b" "closure..." r
(function (${1}) `!p 
if (t[2] and t[2].find('\n') != 0):
	snip += '{'
	snip >> 1
	snip += ''
else:
	res = '{'
`${2}`!p
if (t[2]):
	snip >> 1
	snip += ''
else:	
	res = ' '
`return ${3:fn};`!p
if (t[2]):
	snip.rv += '\n'
	snip.rv += snip.mkline('')
else:	
	res = ''
`})(${4})
endsnippet
	
#SWITCH
snippet "\bsw|switch\b" "switch..." r
switch (${1}) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${2:case }`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${3:default }
}
${4}
endsnippet

#STRING -single
snippet "(?<!')(?![.])+'p" "single quote" r
'+
'${1}'${2}
endsnippet
#STRING -single
snippet "''p\b" "single quote" r
'${1}'+
'${2}'${3}
endsnippet
#STRING -double
snippet "(?<!\")(?![.])+\"p" "single quote" r
"+
"${1}"${2}
endsnippet
#STRING -double
snippet "\"\"p\b" "double quote" r
"${1}"+
"${2}"${3}
endsnippet

#CASE
snippet "\bcase|ca\b" "case..." r
case ${1}:${2}`!p
if (t[2] and t[3] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${3:break;}
endsnippet
#DEFAULT
snippet "\bdefault|\bdf\b" "default..." r
default: ${1}`!p
if (t[1] and t[2] and t[1].find('\n') != 0):
	snip >> 1
	snip += ' '
else:
	res = ''
`${2:break;}
endsnippet

#BREAK
snippet br "break;" w
break;${1}
endsnippet

#CONTINUE
snippet "\bcn|co\b" "continue;" r
continue;${1}
endsnippet

#RETURN
snippet "\bre|ret\b" "return" r
return${1/.+/ /}`!p
if (t[1] and t[2] and t[1].find(' ') != 0):
	snip >> 1
	snip += ' '
else:
	res = ''
`${1};
endsnippet				

#DELETE
snippet "\bdel\b" "delete" r
delete${1/.+/ /}${1:pointer};
endsnippet

#arguments
snippet "\ba|arg|args\b" "arguments" r
arguments
endsnippet
				
#FUNCTION
snippet "\bfn|fun\b" "function () {}" r
function${1/.+/ /}${1} (${2}) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${3:}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res='}'
`${4}
endsnippet


#IF
snippet "\bif\b" "if..." r
if (${1}) {
	${2}
}${3/.+/ /}${3}
endsnippet

#ELSE IF
snippet "\bei|elseif\b" "else if..." r
else if (${1}) {
	${2}
}${3/.+/ /}${3}
endsnippet

#ELSE
snippet "\bel\b|\belse\b" "else..." r
else {
	${1}
}${2}
endsnippet

#setTimeout
snippet st "setTimeout..." w
setTimeout(${1})${2}
endsnippet

#setTimeoutClears
snippet stc "setTimeout Cleared..." w
${1:if ($2) {
	clearTimeout($2);
}}
${2} = setTimeout(function () {
	${2/var[\s\t\n]+//} = undefined;
	${3}
}${4})${5};${6}
endsnippet


snippet "\b[,]{0,1}e\b" "assignment" r
= 
endsnippet
#e 

#n
snippet n "not" w
!
endsnippet

#se
snippet eee "Strict Equality..." w
=== 
endsnippet

#ee
snippet ee "Equality" w
== 
endsnippet

#nee
snippet nee "Strict not equals..." w
!== 
endsnippet

#ne
snippet ne "Not equals" w
!= 
endsnippet

#l 
snippet l "less than" w
< 
endsnippet

#le 
snippet le "less than equal" w
<= 
endsnippet

#g
snippet g "greater than" w
> 
endsnippet

#ge
snippet ge "greater than equals" w
>= 
endsnippet


#
#
#
#Sencha Helpers
#
#
#

#edefine
snippet edef "Ext.define... " w
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.Base}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'config' : {}}${10}${11/.+/,/}
	${11}
}${12/.+/,
/}${12});${13}
endsnippet

snippet emodel "Ext.define..." w
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.data.Model}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'config' : {${10/.+/
		/}${10:'idProperty' : '${11}'}`!p res = ',' if (t[12] and t[10] or t[10] and t[14]) else ''`${12/.+/
		/}${12:'fields' : [${13}]}`!p res=',' if (t[12] and t[14]) else ''`${14/.+/
		/}${14:'proxy' : {${15}}} 
	}}${16/.+/,/}
	${16}
}${17/.+/,
/}${17});${18}
endsnippet
#econtroller
snippet econtroller "Ext.define... controller" w
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.app.Controller}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'config' : {${10/.+/
		/}${10:'refs' : {${11}}}`!p res = ',' if (t[12] and t[10] or t[10] and t[14]) else ''`${12/.+/
		/}${12:'control' : {${13}}}`!p res=',' if (t[12] and t[14]) else ''`${14/.+/
		/}${14:'routes' : {${15}}} 
	}}${16/.+/,/}
	${16}
}${17/.+/,
/}${17});${18}
endsnippet
#estore
snippet estore "Ext.define... store" w
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.data.Store}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alias' : [${6}]}${7/.+/,
	/}${7:'alternateClassName' : '${8}'}${9/.+/,
	/}${9:'statics' : {${10}}}${11/.+/,
	/}${11:'config' : {${12/.+/
		/}${12:'storeId' : '${13}'}`!p res = ',' if (t[14] and t[12] or t[12] and t[16]) else ''`${14/.+/
		/}${14:'model' : '${15}'}`!p res=',' if (t[14] and t[16]) else ''`${16/.+/
		/}${16:'proxy' : {${17}}} 
	}}${18/.+/,/}
	${18}
}${19/.+/,
/}${19});${20}
endsnippet
snippet eview "Ext.define... view" w
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.Container}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'xtype' : '${10}'}${11/.+/,
	/}${11:'config' : {${12/.+/
		/}${12:'cls' : '${13}'}`!p res = ',' if (t[14] and t[12] or t[12] and t[16]) else ''`${14/.+/
		/}${14:'style' : {${15}}}`!p res=',' if (t[14] and t[16]) else ''`${16/.+/
		/}${16:'items' : [${17}]} 
	}}${18/.+/,/}
	${18}
}${19/.+/,
/}${19});${20}
endsnippet

# vim:ft=snippets:
